/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import data.Database;
import java.awt.Button;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.List;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.File;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListCellRenderer;
import javax.swing.ListModel;
import javax.swing.table.DefaultTableModel;

public class PersonalBlog extends javax.swing.JFrame {

    private Database da = new Database();
    private ImagePanel ip;

    private JTextArea entry;
    private JLabel personall, blogg;
    private JLabel header;
    
    private JButton add, modify;
    private JButton put, pull;
    
    private JScrollPane jScrollPane1;
    private JList blogListing;
    
    /**
     * Creates new form PersonalBlog
     */
    public PersonalBlog() {
        initComponents();
        setBackground();
        setComponents();
        setInsertPost();
        setModifyPost();
        db();
    }
    
    private void setComponents() {
        this.setLayout(null);
        this.ip.setLayout(null);
        header = new JLabel();
        header.setBounds(20, 20, 400, 50);
        header.setFont(new Font("arial", Font.BOLD, 36));
        header.setText("Personal Blog in Swing");
        this.ip.add(header);
        entry = new JTextArea();
        entry.setBounds(20, 70, 400, 200);
        entry.setLineWrap(true);
        this.ip.add(entry);
        add = new JButton();
        add.setBounds(140, 300, 50, 25);
        add.setText("add");
        this.ip.add(add);
        modify = new JButton();
        modify.setBounds(200, 300, 70, 25);
        modify.setText("modify");
        this.ip.add(modify);
        personall = new JLabel();
        personall.setBounds(440, 70, 100, 25);
        personall.setText("Personal");
        this.ip.add(personall);
        blogg = new JLabel();
        blogg.setBounds(480, 95, 100, 25);
        blogg.setText("Blog");
        this.ip.add(blogg);
        put = new JButton();
        put.setBounds(470, 180, 40, 25);
        put.setText("<");
        this.ip.add(put);
        pull = new JButton();
        pull.setBounds(510, 180, 40, 25);
        pull.setText(">");
        this.ip.add(pull);
        blogListing = new JList();
        blogListing.setBounds(580, 70, 250, 400);
        this.ip.add(blogListing);
        jScrollPane1 = new JScrollPane(blogListing);
        jScrollPane1.setBounds(580, 70, 250, 400);
        this.ip.add(jScrollPane1);
    }
    
    private void setBackground() {
        try {
            Image image = ImageIO.read(new File("bg.png"));
            this.ip = new ImagePanel(image);
            this.ip.setBounds(0, 0, 856, 559);
            this.add(this.ip);
        } catch(Exception exce) {}
    }

     /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(856, 559));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 856, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 559, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void setInsertPost() {
        add.addMouseListener(new MouseListener() {
            public void mouseClicked(MouseEvent e) {
                new InsertBlog(PersonalBlog.this).setVisible(true);
            }

            public void mousePressed(MouseEvent e) {}

            public void mouseReleased(MouseEvent e) {}

            public void mouseEntered(MouseEvent e) {}

            public void mouseExited(MouseEvent e) {}
        });
    }
    
    private void setModifyPost() {
        modify.addMouseListener(new MouseListener() {
            public void mouseClicked(MouseEvent e) {
                String email;
                String title;
                String post;
                String sql;
                Object s = blogListing.getSelectedValue();
                String[] ss = (String[]) s;
                sql = "SELECT email, title, post FROM blog WHERE title = '" + ss[1] + "'";
                ResultSet res = da.query(sql);
                try {
                    if(res.next()) {
                        email = res.getString("email");
                        title = res.getString("title");
                        post = res.getString("post");
                    } else {
                        email = null;
                        title = null;
                        post = null;
                    }
                } catch(SQLException exce) {
                        email = null;
                        title = null;
                        post = null;
                }
                if(email != null) {
                    new UpdateBlog(PersonalBlog.this, email, title, post).setVisible(true);
                }
            }

            public void mousePressed(MouseEvent e) {}

            public void mouseReleased(MouseEvent e) {}

            public void mouseEntered(MouseEvent e) {}

            public void mouseExited(MouseEvent e) {}
        });
    }

    public void setEntry(String entry) {
        this.entry.setText(entry);
    }
    
    public void db() {
        da.query("SELECT inputdate FROM blog");
        ResultSet res = da.query("SELECT inputdate, title FROM blog ORDER BY inputdate ASC");
        DefaultListModel<String> listModel = new DefaultListModel<>();
        DefaultListModel<String> listModel2 = new DefaultListModel<>();
        try {
            int i = 0;
            while(res.next()) {
                listModel.addElement(res.getString("inputdate"));
                System.out.println(listModel.getElementAt(i));
                listModel2.addElement(res.getString("title"));
                System.out.println(listModel2.getElementAt(i));
                i++;
            }
        } catch(SQLException exc) {}
        put.addMouseListener(new MouseListener() {
            public void mouseClicked(MouseEvent e) {
                Object s = blogListing.getSelectedValue();
                String[] ss = (String[]) s;
                Database da = new Database();
                ResultSet res = da.query("SELECT post FROM blog WHERE title = '" + ss[1] + "'");
                try {
                    if(res.next()) {
                        setEntry(res.getString("post"));
                    }
                } catch(SQLException exc) {}
            }
            public void mousePressed(MouseEvent e) {}
            public void mouseReleased(MouseEvent e) {}
            public void mouseEntered(MouseEvent e) {}
            public void mouseExited(MouseEvent e) {}
        });
        pull.addMouseListener(new MouseListener() {
            public void mouseClicked(MouseEvent e) {
                setEntry("");
            }
            public void mousePressed(MouseEvent e) {}
            public void mouseReleased(MouseEvent e) {}
            public void mouseEntered(MouseEvent e) {}
            public void mouseExited(MouseEvent e) {}
        });
        String[][] columnData;
        columnData = new String[listModel2.size()][2];
        for(int i = 0; i < listModel.getSize(); i++) {
            columnData[i][0] = listModel.get(i);
            columnData[i][1] = listModel2.get(i);
        }
        blogListing.setListData(columnData);
        blogListing.setCellRenderer(new MyCellRenderer());
    }
    
    static class MyCellRenderer extends JPanel implements ListCellRenderer{
        JLabel left, right;
        MyCellRenderer() {
           //setLayout(new GridLayout(1, 2));
           left      = new JLabel();
           right      = new JLabel();
           add(left);
           add(right);
        }

        public Component getListCellRendererComponent(JList list,Object value,int index,boolean isSelected,boolean cellHasFocus){
           String leftData      = ((String[])value)[0];
           String rightData      = ((String[])value)[1];
           left.setText(leftData);
           right.setText(rightData);
           return this;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PersonalBlog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PersonalBlog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PersonalBlog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PersonalBlog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PersonalBlog().setVisible(true);
            }
        });
    }

    class ImagePanel extends JPanel{
        Image image;
        public ImagePanel(Image image){
            this.image = image;
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            g.drawImage(image, 0,0, this);
        }
    }
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}